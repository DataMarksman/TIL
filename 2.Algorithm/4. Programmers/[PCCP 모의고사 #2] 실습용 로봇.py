# PRG.

# 설계 의도: 조건에 맞는 실행

# 로직의 Main 개념: 2차원 좌표 위에서의 좌표 이동.

# 개선점:

# [주의!] 본 문제에서는 수학적인 2차원 좌표계를 사용합니다.
# 다른 문제에서는 X, Y를 반대로 다루기도 합니다. 문제에 맞춰 유도리있게 생각합시다.

# 방향 조타용 리스트 입니다. 각 idx는 방향을 나타냅니다.
# 0: 위, 1: 오른쪽, 2: 아래쪽, 3: 왼쪽

# 각 방향으로 가기 위해 x 좌표를 이동시킬 값을 배정해줍니다.
dx = [0, 1, 0, -1]
# 각 방향으로 가기 위해 y 좌표를 이동시킬 값을 배정해줍니다.
dy = [1, 0, -1, 0]


def solution(command):
    # 2차원 좌표계 위에서의 x 좌표, y 좌표의 초기 값을 각각 0으로 설정해줍니다.
    x = 0
    y = 0

    # 현재 보고 있는 방향의 초기 값을 0으로 설정해줍니다.
    direction = 0

    # String 값을 하나씩 순회하면서 명령을 수행합니다.
    for move in command:

        # 명령이 R 이라면, 방향을 오른쪽으로 90도 돌립니다.
        # 다만, 3일 경우 4로 idx 한계치치를 초과하므로,
        # 기존 값에서 + 1 한 값을 4로 나눈 나머지를 방향 값으로 한다.
        if move == 'R':
            direction = (direction + 1) % 4

        # 방향을 왼쪽으로 돌리는 경우에, idx가 0일 경우, -1 이 되므로,
        # +3을 하는 것으로 뒤로 한칸 이동한 효과를 보도록 한다. ex) 0 + 3 = 3
        elif move == 'L':
            direction = (direction + 3) % 4

        # 명령이 G 라면, 현재의 방향으로 한칸 이동한다.
        # 이전에 설정해두었던 좌표 리스트의 idx 값을 기반으로, 현재 방향에 맞게 x, y 좌표를 증/감 시킨다.
        elif move == 'G':
            x += dx[direction]
            y += dy[direction]
        else:
            x -= dx[direction]
            y -= dy[direction]
    answer = [x, y]
    return answer